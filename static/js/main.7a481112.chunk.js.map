{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["calc","x","y","window","innerHeight","innerWidth","trans","rx","ry","rs","concat","join","App","cardRef","useRef","_useSpring","useSpring","rxrys","config","mass","tension","friction","_useSpring2","Object","slicedToArray","set","bind","useGesture","onMove","_ref","xy","apply","toConsumableArray","onHover","_ref2","hovering","domTarget","useEffect","react_default","a","createElement","web","div","ref","className","style","transform","interpolate","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAMMA,SAAO,SAACC,EAAGC,GAAJ,MAAU,GACnBA,EAAIC,OAAOC,YAAc,GAAK,IAC/BH,EAAIE,OAAOE,WAAa,GAAK,GAC9B,OAGIC,EAAQ,SAACC,EAAIC,EAAIC,GAAT,MAAgB,CAC5B,qBAD4B,WAAAC,OAEjBH,EAFiB,mBAAAG,OAGjBF,EAHiB,iBAAAE,OAInBD,EAJmB,MAK5BE,KAAK,MA+BQC,MA7Bf,WACE,IAAMC,EAAUC,mBADHC,EAGYC,YAAU,iBAAO,CACxCC,MAAO,CAAC,EAAG,EAAG,GACdC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,OALhCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GAGJE,EAHIK,EAAA,GAGJL,MAASQ,EAHLH,EAAA,GAQPI,EAAOC,YACX,CACEC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,GAAH,OAAYL,EAAI,CAAER,MAAOjB,EAAI+B,WAAJ,EAAAR,OAAAS,EAAA,EAAAT,CAAQO,OACzCG,QAAS,SAAAC,GAAA,OAAAA,EAAGC,UAA4BV,EAAI,CAAER,MAAO,CAAC,EAAG,EAAG,OAE9D,CACEmB,UAAWvB,IAMf,OAFAwB,oBAAUX,EAAM,CAACA,IAGfY,EAAAC,EAAAC,cAACC,EAAA,EAASC,IAAV,CACEC,IAAK9B,EACL+B,UAAU,OACVC,MAAO,CAAEC,UAAW7B,EAAM8B,YAAYzC,OC9BxB0C,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7a481112.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { animated, useSpring } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\n\nimport './card.css'\n\nconst calc = (x, y) => [\n  -(y - window.innerHeight / 2) / 10,\n  (x - window.innerWidth / 2) / 10,\n  1.1,\n]\n\nconst trans = (rx, ry, rs) => [\n  'perspective(600px)',\n  `rotateX(${rx}deg)`,\n  `rotateY(${ry}deg)`,\n  `scale(${rs})`,\n].join(' ')\n\nfunction App() {\n  const cardRef = useRef()\n\n  const [{ rxrys }, set] = useSpring(() => ({\n    rxrys: [0, 0, 1],\n    config: { mass: 5, tension: 350, friction: 40 },\n  }))\n\n  const bind = useGesture(\n    {\n      onMove: ({ xy }) => set({ rxrys: calc(...xy) }),\n      onHover: ({ hovering }) => !hovering && set({ rxrys: [0, 0, 1] }),\n    },\n    {\n      domTarget: cardRef,\n    },\n  )\n\n  useEffect(bind, [bind])\n\n  return (\n    <animated.div\n      ref={cardRef}\n      className=\"card\"\n      style={{ transform: rxrys.interpolate(trans) }}\n    />\n  )\n}\n\nexport default App\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}